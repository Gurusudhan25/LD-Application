# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KViRWH6qkJyw__Xfv05LIMzPY1-h0LUd
"""

from __future__ import print_function
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report
from sklearn import metrics
from sklearn import tree
import warnings
from sklearn.preprocessing import LabelEncoder
warnings.filterwarnings('ignore')

url = "data.csv"

df = pd.read_csv(url)

# print(df.head())
# print('')
# print(df.shape)

# print(df.columns)

df = df.drop(['MRD_no'], axis=1)

df = df.dropna(axis=1)
# print(df.isna().sum())

# print(df['LD'].value_counts())

le = LabelEncoder()
df_cols = ['Reading', 'Writing', 'Maths', 'Attention', 'Hyperactive', 'Visual Memory', 'Impulsive',
           'Auditory Discrimination', 'Auditory Memory', 'Visual Discrimination', 'processing speed']

for col in df_cols:
    le = LabelEncoder()
    le.fit(df[col])
    df[col] = le.transform(df[col])

# print(df.head())


features = df[['Reading', 'Writing', 'Maths', 'Attention', 'Hyperactive',
               'Impulsive', 'Auditory Discrimination', 'Visual Discrimination']]
target = df['LD']

acc = []
model = []

Xtrain, Xtest, Ytrain, Ytest = train_test_split(
    features, target, test_size=0.2, random_state=2)

"""**Navie bayes**"""


NaiveBayes = GaussianNB()

NaiveBayes.fit(Xtrain, Ytrain)

predicted_values = NaiveBayes.predict(Xtest)
x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('Naive Bayes')
# print("Naive Bayes's Accuracy is: ", x)

# print(classification_report(Ytest,predicted_values))

score = cross_val_score(NaiveBayes, features, target, cv=5)
score

"""**Support Vector Machine**"""

# data normalization with sklearn
# fit scaler on training data
norm = MinMaxScaler().fit(Xtrain)
X_train_norm = norm.transform(Xtrain)
# transform testing dataabs
X_test_norm = norm.transform(Xtest)
SVM = SVC(kernel='poly', degree=3, C=1)
SVM.fit(X_train_norm, Ytrain)
predicted_values = SVM.predict(X_test_norm)
x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('SVM')
# print("SVM's Accuracy is: ", x)

# print(classification_report(Ytest,predicted_values))

score = cross_val_score(SVM, features, target, cv=5)
score

"""**Random Forest**"""


RF = RandomForestClassifier(n_estimators=20, random_state=0)
RF.fit(Xtrain, Ytrain)

predicted_values = RF.predict(Xtest)

x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('RF')
# print("RF's Accuracy is: ", x)

# print(classification_report(Ytest,predicted_values))

score = cross_val_score(RF, features, target, cv=5)
score

# print(model)
# print(acc)

plt.figure(figsize=[10, 3], dpi=100)
plt.title('Accuracy Comparison')
plt.xlabel('Accuracy')
plt.ylabel('Algorithm')
sns.barplot(x=acc, y=model, palette='dark')

accuracy_models = dict(zip(model, acc))
# for k, v in accuracy_models.items():
#     print (k, '-->', v)

# """**TESTING THE MODEL**"""

# print("------ Welcome to ML School Application --------")
# print('Enter Student details to find whether he must be improved or not?')


# Reading=input("Does the Student Reads Well?: ")
# Writing=input("Does the Student Writes Well?: ")
# Maths=input("Does the Student Calculates Well?: ")
# Attention=input("Does Student pays Attention?: ")
# Hyperactive=input("is Student Hyperactive?:")
# Impulsive=input("is Student Impulsive?: ")
# Auditory_Discrimination=input("Does Student can discriminate voice?: ")
# Visual_Discrimination=input("Does Student can discriminate visual?: ")

# arr=[Reading,Writing,Maths,Attention,Hyperactive,Impulsive,Auditory_Discrimination,Visual_Discrimination]

# le.fit(arr)
# arr = le.transform(arr)
# val = np.array([arr])

# prediction = RF.predict(val)
# if (prediction[0]=='yes'):
#   print("The student is Suffering from Learning Disability Should be Helped to improve")
# else:
#   print("No, Student is fine")
